const WebSocket = require('ws');
var rtg = require('random-token-generator');
var fs = require('fs');
var SHA256 = require('js-sha256').sha256;
const https = require('https');
const sqlite3 = require('sqlite3').verbose();
let db = new sqlite3.Database('./data/users.db');

db.run(`CREATE TABLE IF NOT EXISTS Users(USERNAME text, PASSWORD text, ADMIN text, TOKEN text)`);

const server = https.createServer({
    cert: fs.readFileSync('./data/cert.pem'),
    key: fs.readFileSync('./data/key.pem')
});

const wss = new WebSocket.Server({
    //port: 35012
    server: server
});

var current_alive = [];

server.listen(function () {
    console.log("listening...");
    server.on("newSession", function (sessionId, sessionData) {
        console.log(sessionData);
    });
    server.on("secureConnection", function (tlsSocket) {
        console.log("connection!");
    });;
});

wss.on("connection", function (ws) {
    console.log(ws.co)
});

/*
wss.on("connection", function connection(ws) {
    setInterval(function () {
        wss.broadcast(JSON.stringify({
            "TYPE": "PING"
        }));
        current_alive = [];
        setTimeout(function () {}, 3000);
        wss.broadcast(JSON.stringify({
            "TYPE": "USERS",
            "MESSAGE": current_alive
        }));
    }, 10000);
    ws.on('message', function incoming(message) {
        var json = JSON.parse(message);
        
    });
});

wss.broadcast = function broadcast(msg) {
    wss.clients.forEach(function each(client) {
        client.send(msg);
    });
};

String.prototype.replaceAll = function (search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function writeMessage(username, message, channel) {
    fs.readdir("./data/logs", function (err, files) {
        files.forEach(function (logname) {
            if (logname == channel + ".json") {
                fs.readFile("./data/logs/" + logname, "utf8", function (err, data) {
                    var json = JSON.parse(data);
                    json.logs.unshift({
                        "username": username,
                        "message": message
                    });
                    fs.writeFile("./data/logs/" + logname, JSON.stringify(json), function (callback) {});
                });
            }
        });
    });
}

function refreshDb() {
    db.close();
    db = new sqlite3.Database('./data/users.db');
}*/